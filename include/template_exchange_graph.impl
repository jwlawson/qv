namespace cluster {
namespace exchange_graph {
/* ExchangeGraph */
template <class V, class G>
inline Graph<V, G>::Graph(Vertex const &mat, int matrix_size, size_t max_num)
    : _matrix_size(matrix_size), _max_num(max_num) {
  VertexPtr m = new Vertex(mat);
  _queue.push_back(m);
  _map.emplace(std::piecewise_construct, std::forward_as_tuple(m),
               std::forward_as_tuple(m, _matrix_size));
  _GraphLoader l(*this);
  while (!l.end()) {
    l.load_next();
  }
}
template <class V, class G> inline Graph<V, G>::~Graph() {
  for (auto it = _map.begin(); it != _map.end(); ++it) {
    delete it->first;
  }
}
template <class V, class G>
inline typename Graph<V, G>::GraphMap const &
Graph<V, G>::underlying_map() const {
  return _map;
}
template <class V, class G>
inline const typename Graph<V, G>::GraphMap::const_iterator
Graph<V, G>::begin() const {
  return _map.begin();
}
template <class V, class G>
inline const typename Graph<V, G>::GraphMap::const_iterator
Graph<V, G>::end() const {
  return _map.end();
}
/* _GraphLoader */
template <class V, class G>
inline Graph<V, G>::_GraphLoader::_GraphLoader(Graph &graph)
    : _graph(graph), _size(graph._matrix_size) {}

template <class V, class G> inline void Graph<V, G>::_GraphLoader::load_next() {
  CVertexPtr mat = _graph._queue.front();
  _graph._queue.pop_front();
  for (std::size_t i = 0; !_end && i < _size; ++i) {
    if (mutate_at(mat, i)) {
      VertexPtr new_matrix = new_instance(_size);
      mutate(mat, i, *new_matrix);
      if (have_seen(new_matrix)) {
        seen_matrix(new_matrix, mat, i);
        delete new_matrix;
      } else {
        // up to this point _end is always false
        unseen_matrix(new_matrix, mat, i);
        _end =
            (_graph._map.size() >= _graph._max_num) || should_stop(new_matrix);
      }
    }
  }
  _end = _end || _graph._queue.empty();
}
template <class V, class G> inline bool Graph<V, G>::_GraphLoader::end() const {
  return _end;
}
template <class V, class G>
inline bool Graph<V, G>::_GraphLoader::have_seen(CVertexPtr new_mat) {
  return _graph._map.find(new_mat) != _graph._map.end();
}
template <class V, class G>
inline bool Graph<V, G>::_GraphLoader::mutate_at(CVertexPtr old_mat,
                                                 int vertex) {
  bool should_mutate = should_continue(old_mat, vertex);
  if (should_mutate) {
    auto position = _graph._map.find(old_mat);
    should_mutate =
        position != _graph._map.end() && position->second[vertex] == nullptr;
  }
  return should_mutate;
}
template <class V, class G>
inline void Graph<V, G>::_GraphLoader::seen_matrix(CVertexPtr new_mat,
                                                   CVertexPtr old_mat,
                                                   int vertex) {
  auto ref = _graph._map.find(new_mat);
  if (ref != _graph._map.end() && is_exactly(new_mat, ref->first)) {
    ref->second[vertex] = old_mat;
  }
  auto &old_matrix_vertex_link = _graph._map[old_mat][vertex];
  if (old_matrix_vertex_link == nullptr) {
    old_matrix_vertex_link = ref->first;
  }
}
template <class V, class G>
inline void Graph<V, G>::_GraphLoader::unseen_matrix(CVertexPtr new_mat,
                                                     CVertexPtr old_mat,
                                                     int vertex) {
  _graph._map.emplace(std::piecewise_construct, std::forward_as_tuple(new_mat),
                      std::forward_as_tuple(new_mat, _size));
  _graph._map[new_mat][vertex] = old_mat;
  _graph._map[old_mat][vertex] = new_mat;
  _graph._queue.push_back(new_mat);
}
/* _Link */
template <class V, class G>
inline Graph<V, G>::_Link::_Link() : _matrix(nullptr) {}

template <class V, class G>
inline Graph<V, G>::_Link::_Link(CVertexPtr matrix, int size)
    : _matrix(matrix), _links(size, nullptr) {}

template <class V, class G>
inline typename Graph<V, G>::CVertexPtr &Graph<V, G>::_Link::operator[](int i) {
  return _links[i];
}
template <class V, class G>
inline const typename Graph<V, G>::_Link::LinkVec::const_iterator
Graph<V, G>::_Link::begin() const {
  return _links.begin();
}
template <class V, class G>
inline const typename Graph<V, G>::_Link::LinkVec::const_iterator
Graph<V, G>::_Link::end() const {
  return _links.end();
}
} // namespace exchange_graph
} // namespace cluster
